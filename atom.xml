<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.tomhurry.com/"/>
  <updated>2019-09-22T11:21:13.354Z</updated>
  <id>http://blog.tomhurry.com/</id>
  
  <author>
    <name>TaoZhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础数学知识</title>
    <link href="http://blog.tomhurry.com/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    <id>http://blog.tomhurry.com/wiki/计算机基础知识/基础数学知识/</id>
    <published>2019-09-22T11:11:46.000Z</published>
    <updated>2019-09-22T11:21:13.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="取整操作"><a href="#取整操作" class="headerlink" title="取整操作"></a>取整操作</h3><p><strong>向上取整</strong>：运算称为 Ceiling，用数学符号 <strong>⌈⌉</strong>  （上有起止，开口向下）表示。</p><p><strong>向下取整</strong>：运算称为 Floor，用数学符号 <strong>⌊⌋</strong> （下有起止，开口向上）表示。</p><p>注意，向上/向下取整是针对于浮点数而言的，整数向上/向下取整还是整数本身。</p><p>可以将待取整的数字置于坐标系的y轴，向上取整则为向上取最近的整数，向下取整则为向下取最近的整数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;取整操作&quot;&gt;&lt;a href=&quot;#取整操作&quot; class=&quot;headerlink&quot; title=&quot;取整操作&quot;&gt;&lt;/a&gt;取整操作&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;向上取整&lt;/strong&gt;：运算称为 Ceiling，用数学符号 &lt;strong&gt;⌈⌉&lt;/strong&gt;  
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="http://blog.tomhurry.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://blog.tomhurry.com/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.tomhurry.com/wiki/计算机基础知识/数据结构/</id>
    <published>2019-09-22T05:29:04.000Z</published>
    <updated>2019-09-23T08:12:05.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些感念"><a href="#一些感念" class="headerlink" title="一些感念"></a>一些感念</h3><hr><blockquote><p>数据结构就是研究数据的<strong>逻辑结构</strong>和<strong>物理结构</strong>以及它们之间的<strong>相互关系</strong>。</p></blockquote><ul><li><p>数据结构是指数据元素的<strong>集合</strong>及元素间的<strong>相互关系</strong>和<strong>构造方法</strong>。</p></li><li><p>元素之间的相互关系称为逻辑结构，分为两大类：线性结构和非线性结构</p></li><li><p>元素与元素之间关系的存储称为存储结构（物理结构）</p></li><li><p>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合。是计算机操作的对象的总称。</p></li><li><p>数据元素：数据（集合）中的一个“个体”，数据及结构中讨论的基本单位</p></li><li><p>数据项：数据的不可分割的最小单位。一个数据元素可由若干个数据项组成。</p></li><li><p>数据类型：在一种程序设计语言中，变量所具有的数据种类。整型、浮点型、字符型等等</p></li><li><p>逻辑结构：数据之间的相互关系。</p><ul><li><p>集合 结构中的数据元素除了同属于一种类型外，别无其它关系。</p></li><li><p>线性结构 数据元素之间一对一的关系</p></li><li><p>树形结构 数据元素之间一对多的关系</p></li><li><p>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</p></li></ul></li><li><p>物理结构/存储结构：数据在计算机中的表示。物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等</p></li><li><p>在数据结构中，从逻辑上可以将其分为线性结构和非线性结构</p></li><li><p>数据结构的基本操作的设置的最重要的准则是，实现应用程序与存储结构的独立。实现应用程序是“逻辑结构”，存储的是“物理结构”。逻辑结构主要是对该结构操作的设定，物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、希哈结构）等。</p></li><li><p>顺序存储结构中，线性表的逻辑顺序和物理顺序总是一致的。但在链式存储结构中，线性表的逻辑顺序和物理顺序一般是不同的。</p></li><li><p>算法五个特性： 有穷性、确定性、可行性、输入、输出</p></li><li><p>算法设计要求：正确性、可读性、健壮性、高效率与低存储量需求。(好的算法)</p></li><li><p>算法的描述有伪程序、流程图、N-S结构图等。E-R图是实体联系模型，不是程序的描述方式。</p></li><li><p>设计算法在执行时间时需要考虑：算法选用的规模、问题的规模</p></li><li><p>时间复杂度：算法的执行时间与原操作执行次数之和成正比。</p></li><li><p>空间复杂度：若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析除输入和程序之外的辅助变量所占额外空间。</p></li></ul><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><hr><p>线性表是最简单、最基本也是最常用的一种线性结构，常采用顺序存储和链式存储，主要的基本操作是插入、删除和查找等。根据存储结构可以分为以下两种：</p><p>​    <strong>1.线性表的顺序存储</strong>：用一组地址连续的存储单元依次存储数据元素，简称<strong>顺序表</strong></p><p>​    <strong>优点</strong>：可以随机存取表中的元素，因为存储地址是连续的，所以读取时，只要计算出下标就可以随机访问，存储时按顺序存储。</p><p>​    <strong>缺点</strong>：插入和删除操作需要移动元素。</p><p>​    <strong>2.线性表的链式存储</strong>：用通过指针链接起来的结点来存储数据元素。结点分为数据域和指针域，数据域用于存储数据元素的值，指针域则存储当前结点的前驱和后继的位置信息。因为地址并不要求是连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。</p><p>​    <strong>优点</strong>：插入和删除操作不需要移动元素</p><p>​    <strong>缺点</strong>：不能随机访问</p><p>根据指针域的设置方式，可以分为以下几种链表结构：</p><ul><li>单链表：若结点中只有一个指针域，则称为线性链表(单链表)，其特点是只能从头结点开始遍历链表。</li><li>双向链表：每个结点包含两个指针，分别指向当前结点的直接前驱和直接后继。其特点是可以从表中任意的结点出发，从两个方向上遍历链表。</li><li>循环链表：在单向链表(或双向链表)的基础上令尾结点的指针指向头结点，构成循环链表。其特点是可以从表中任意结点开始遍历整个链表。</li><li>静态链表： 借助数组来描述线性表的链式存储结构，用数据元素的下标表示元素所在结点的指针。</li></ul><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><hr><p>栈和队列是程序中常用的两种数据结构，逻辑结构和线性表相同。其特点在于运算有所限制：<strong>栈</strong>按“<strong>后进先出</strong>”的规则进行操作，<strong>队列</strong>按“<strong>先进先出</strong>”的规则进行操作，所以称为运算受限的线性表。</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>栈是只能访问它的一端来实现数据存储和检索的一种线性数据结构，进行插入和删除的一端称为栈顶(Top)，另一端称为栈底(Bottom)，不含数据元素的栈称为空栈。</p><p>根据存储结构可以分为顺序栈和链栈，顺序栈空间容量是有限的，所以在插入元素时需要判断是否栈满。链栈不必另外设置头指针，链表的头指针就是栈顶指针。</p><p>​    顺序存储：</p><p>​    链式存储：</p><p>应用：典型应用包括表达式求值、括号匹配、浏览器历史记录等，将递归转变成非递归操作也可以用到栈。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素。在队列中，允许插入元素的一端称为队尾(Rear)，允许删除元素的一端称为队头(Front)。</p><p>​    <strong>顺序队列</strong>：顺序存储结构。当头尾指针相等时队列为空。在非空队列里，头指针始终指向队头前一个位置，而尾指针始终指向队尾元素的实际位置</p><p>​    <strong>循环队列</strong>：将顺序队列假想成环状结构(通过整数取余运算实现)。根据定义，空队列和满队列头尾指针指向的位置是相同的，所以为了区分这两个状态可以采用以下两种处理方式：</p><p>​    1.设置一个标志，以区分两个状态</p><p>​    2.牺牲一个存储单元，约定以“队列的尾指针所指的下一个位置是头指针时”表示队满，相同则表示队空。即队满：<strong>(rear+1)%MaxSize==front</strong>，队空：<strong>rear==front</strong>。</p><p>​    <strong>链队列</strong>：链式存储结构。限制仅在表头删除和表尾插入的单链表。显然仅有单链表的头指针不便于在表尾做插入操作，为此再增加一个尾指针，指向链表的最后一个结点。</p><p>​    基本运算：</p><p>​    队空条件：<strong>rear==front</strong></p><p>​    队满条件：<strong>(rear+1)%MaxSize==front</strong></p><p>​    计算队列长度：<strong>(rear-front+MaxSize)%MaxSize</strong></p><p>​    入队：<strong>(rear+1)%MaxSize</strong></p><p>​    出队：<strong>(front+1)%MaxSize</strong></p><h3 id="串"><a href="#串" class="headerlink" title="串"></a>串</h3><hr><p>串(String)是一种数据元素为字符的特殊的线性表。</p><p>几个基本概念：</p><ul><li>空串：长度为零的串称为空串，空串不包含任何字符。</li><li>空格串：由一个或多个空格组成的串。</li><li>子串：由串中任意长度的连续字符构成的序列称为子串。含有子串的串称为主串。子串在主串中的位置是指子串首次出现时该子串第一个字符在主串的位置。空串是任意串的子串。</li><li>串相等：指两个串长度相等且对应序号的字符也相同。</li><li>串比较：以ASCII码值(或其他字符编码集合)作为依据。</li></ul><p>串匹配：子串的定位操作，子串称为模式串。蛮力法匹配。KMP算法匹配。Boyer-Moore算法匹配。</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><hr><p>树结构是一种非常重要的非线性结构，该结构中的一个数据元素可以有两个或以上的直接后继元素，树可以用来描述客观世界中广泛存在的层次结构关系。</p><p>树的定义是递归的</p><p>树的基本概念：</p><ul><li>双亲、孩子和兄弟：结点的子树的根称为该结点的孩子；该节点称为其子节点的双亲，具有相同双亲的结点互为兄弟。</li><li>结点的度：结点孩子的个数。</li><li>叶子结点：指度为0的结点。</li><li>内部结点：度不为0的结点，也称为分支结点或非终端结点。</li><li>结点的层次：根为第一层，根的孩子为第二层，以此类推，若结点在第<strong>i</strong>层，则其孩子在第<strong>i+1</strong>层。</li><li>树的高度：一棵树的最大层数记为树的高度(或深度)。</li><li>有序(无序)树：若将树中结点的各子树看成是从左到右具有次序的，即不可交换，则为有序树，否则为无序树。</li></ul><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>二叉树是<strong>n</strong>(<strong>n&gt;=0</strong>)个结点的有限集合，它或者是空树(<strong>n=0</strong>)，或者是由一个根节点及两颗不相交的且分别称为左、右子树的二叉树所组成。二叉树具有递归性质。</p><p>普通树与二叉树的区别：</p><ul><li><p>二叉树结点的子树有左、右子树的概念，而普通树没有。</p></li><li><p>二叉树结点最大度为2，而普通树不限制结点的度数。</p></li></ul><p><strong>性质</strong>：</p><ul><li>二叉树第<strong>i</strong>层(<strong>i&gt;=1</strong>)上最多有<strong>2<sup>i-1</sup></strong>个结点。</li><li>高度为<strong>k</strong>的二叉树最多有<strong>2<sup>k</sup>-1</strong>个结点(<strong>k&gt;=1</strong>)。</li><li>对于任何一棵二叉树，若其终端结点数为<strong>n<sub>0</sub></strong>，度为2的结点数为<strong>n<sub>2</sub></strong>，则<strong>n<sub>0</sub>=n<sub>2</sub>+1</strong>。</li><li>具有<strong>n</strong>个结点的完全二叉树的深度为<strong>⎣log<sub>2</sub>n⎦+1</strong>。</li><li><strong>n</strong>个结点的二叉树中，完全二叉树具有最小的路径长度。</li></ul><p><strong>二叉树的存储结构</strong>：</p><p>1.顺序存储：适用于完全二叉树</p><p>假如有编号为i的结点，则有：</p><ul><li>若<strong>i=1</strong>，则该结点为根结点，无双亲；若<strong>i&gt;1</strong>，则该结点的双亲结点为<strong>⎣i/2⎦</strong>。</li><li>若<strong>2i&lt;=n</strong>，则该结点的左孩子编号为<strong>2i</strong>，否则无左孩子。</li><li>若<strong>2i+1&lt;=n</strong>，则该结点的右孩子编号为<strong>2i+1</strong>，否则无右孩子。</li></ul><p>2.链式存储：三叉链表或二叉链表(三叉比二叉多了一个双亲指针)</p><p><strong>二叉树的类型</strong>：</p><p>1.满二叉树</p><p>若深度为<strong>k</strong>的二叉树有<strong>2<sup>k</sup>-1</strong>个结点，则称其为满二叉树。</p><p>2.完全二叉树</p><p>深度为k、有n个结点的二叉树，当且仅当其每个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。下图非完全二叉树是因为6号结点的左边有空结点。</p><p><img src="/images/datastructure/erchashu_001.png" alt="满二叉树和完全二叉树示意图"></p><p>3.线索二叉树</p><p>4.最优二叉树(哈夫曼树)</p><p>一些概念</p><ol><li>路径：从一个祖先结点到子孙结点之间的分支构成这两个结点间的路径；</li><li>路径长度：路径上的分支数目称为路径长度；</li><li>树的路径长度：从根到每个结点的路径长度之和。</li><li>结点的权：根据应用的需要可以给树的结点赋权值；</li><li>结点的带权路径长度：从根到该结点的路径长度与该结点权的乘积；</li><li>树的带权路径长度=树中所有叶子结点的带权路径之和；通常记作 <strong>WPL=∑W<sub>i</sub>×L<sub>i</sub></strong></li><li>哈夫曼树：假设有n个权值(w<sub>1</sub>, w<sub>2</sub>, … , w<sub>n</sub>)，构造有n个叶子结点的二叉树，每个叶子结点有一个 w<sub>i</sub>作为它的权值。则带权路径长度最小的二叉树称为哈夫曼树。最优二叉树。</li></ol><p>前缀码的定义：在一个字符集中，任何一个字符的编码都不是另一个字符编码的前缀。霍夫曼编码就是前缀码，可用于快速判断霍夫曼编码是否正确。霍夫曼树是满二叉树，若有n个节点，则共有(n+1)/2个码子</p><p>给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为霍夫曼树(Huffman Tree)。霍夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><p>假设哈夫曼树是二叉的话，则度为0的结点个数为N，度为2的结点个数为N-1，则结点总数为2N-1。哈夫曼树的结点个数必为奇数。</p><p>哈夫曼树不一定是完全二叉树，但一定是最优二叉树。</p><p>若度为m的哈夫曼树中,其叶结点个数为n,则非叶结点的个数为[(n-1)/(m-1)]。边的数目等于度。</p><p><strong>二叉树的遍历</strong>：</p><p>1.遍历策略：先序遍历、中序遍历、后序遍历、层序遍历</p><p>2.遍历方式：递归、栈、队列</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreOrderByRecursive</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">           System.out.print(root.data + <span class="string">" "</span>);</span><br><span class="line">           PreOrderByRecursive(root.lchild);</span><br><span class="line">           PreOrderByRecursive(root.rchild);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 中序遍历</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InOrderByRecursive</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">           InOrderByRecursive(root.lchild);</span><br><span class="line">           System.out.print(root.data + <span class="string">" "</span>);</span><br><span class="line">           InOrderByRecursive(root.rchild);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 后序遍历</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PostOrderByRecursive</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">           PostOrderByRecursive(root.lchild);</span><br><span class="line">           PostOrderByRecursive(root.rchild);</span><br><span class="line">           System.out.print(root.data + <span class="string">" "</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 先序遍历:栈</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreOrderByStack</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       BiTree p;</span><br><span class="line">       BiTree q;</span><br><span class="line">       Stack&lt;BiTree&gt; st = <span class="keyword">new</span> Stack();</span><br><span class="line">       p = root;</span><br><span class="line">       <span class="keyword">while</span> (p != <span class="keyword">null</span> || !st.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">               System.out.print(p.data + <span class="string">" "</span>);</span><br><span class="line">               st.add(p);</span><br><span class="line">               p = p.lchild;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               q = st.pop();</span><br><span class="line">               p = q.rchild;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 中序遍历:栈</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InOrderByStack</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       BiTree p;</span><br><span class="line">       BiTree q;</span><br><span class="line">       Stack&lt;BiTree&gt; st = <span class="keyword">new</span> Stack();</span><br><span class="line">       p = root;</span><br><span class="line">       <span class="keyword">while</span> (p != <span class="keyword">null</span> || !st.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">               st.add(p);</span><br><span class="line">               p = p.lchild;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               q = st.pop();</span><br><span class="line">               System.out.print(q.data + <span class="string">" "</span>);</span><br><span class="line">               p = q.rchild;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 后序遍历:栈</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PostOrderByStack</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       Stack&lt;BiTree&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">       Stack&lt;BiTree&gt; output = <span class="keyword">new</span> Stack();</span><br><span class="line">       BiTree node = root;</span><br><span class="line">       <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">               stack.add(node);</span><br><span class="line">               output.add(node);</span><br><span class="line">               node = node.rchild;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node = stack.pop();</span><br><span class="line">               node = node.lchild;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (!output.isEmpty()) &#123;</span><br><span class="line">           BiTree n = output.pop();</span><br><span class="line">           System.out.print(n.data + <span class="string">" "</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层序遍历:队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">       BiTree p;</span><br><span class="line">       Queue&lt;BiTree&gt; queue = <span class="keyword">new</span> LinkedList&lt;BiTree&gt;();</span><br><span class="line">       queue.add(root);</span><br><span class="line">       <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">           p = queue.poll();</span><br><span class="line">           System.out.print(p.data + <span class="string">" "</span>);</span><br><span class="line">           <span class="keyword">if</span> (p.lchild != <span class="keyword">null</span>) &#123;</span><br><span class="line">               queue.add(p.lchild);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (p.rchild != <span class="keyword">null</span>) &#123;</span><br><span class="line">               queue.add(p.rchild);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h4><p>树的存储结构：</p><ol><li>双亲表示法</li><li>孩子表示法</li><li>孩子兄弟表示法（二叉树表示法）：链表中每个结点的两指针域分别指向其第一个孩子结点和下一个兄弟结点</li></ol><p>将树转化成二叉树：右子树一定为空</p><ol><li>加线：在兄弟之间加一连线</li><li>抹线：对每个结点，除了其左孩子外，去除其与其余孩子之间的关系</li><li>旋转：以树的根结点为轴心，将整树顺时针转45°</li></ol><p>森林转换成二叉树：</p><ol><li>将各棵树分别转换成二叉树</li><li>将每棵树的根结点用线相连</li><li>以第一棵树根结点为二叉树的根</li></ol><p>树与转换后的二叉树的关系：转换后的二叉树的先序对应树的先序遍历；转换后的二叉树的中序对应树的后序遍历</p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图的存储形式</p><p>图的遍历</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些感念&quot;&gt;&lt;a href=&quot;#一些感念&quot; class=&quot;headerlink&quot; title=&quot;一些感念&quot;&gt;&lt;/a&gt;一些感念&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;数据结构就是研究数据的&lt;strong&gt;逻辑结构&lt;/strong&gt;和&lt;strong&gt;物理结
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="http://blog.tomhurry.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://blog.tomhurry.com/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/hello-world/"/>
    <id>http://blog.tomhurry.com/wiki/生活学习/hello-world/</id>
    <published>2019-09-16T00:27:58.000Z</published>
    <updated>2019-09-16T00:29:32.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello，world"><a href="#Hello，world" class="headerlink" title="Hello，world!"></a>Hello，world!</h2><p>my name is taozhi, this is my personal blog.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello，world&quot;&gt;&lt;a href=&quot;#Hello，world&quot; class=&quot;headerlink&quot; title=&quot;Hello，world!&quot;&gt;&lt;/a&gt;Hello，world!&lt;/h2&gt;&lt;p&gt;my name is taozhi, this is my pe
      
    
    </summary>
    
    
      <category term="生活学习" scheme="http://blog.tomhurry.com/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://blog.tomhurry.com/wiki/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/Git/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.tomhurry.com/wiki/编程杂记/Git/git学习笔记/</id>
    <published>2019-09-11T07:37:24.000Z</published>
    <updated>2019-09-11T12:52:51.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-上传本地项目到github"><a href="#1-上传本地项目到github" class="headerlink" title="1.上传本地项目到github"></a>1.上传本地项目到github</h3><p>第一步，在github创建新的repository</p><p>第二步，在本地建立git仓库</p><blockquote><p>git init</p></blockquote><p>第三步，将项目的所有文件添加到仓库中</p><blockquote><p>git add .</p><p>或者 git add *</p></blockquote><p>第四步，提交</p><blockquote><p>git commit -m “更新说明”</p></blockquote><p>第五步，将本地仓库关联到github</p><blockquote><p>git remote add origin <a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a>:xxxxxxxx.git</p></blockquote><p>第六步，上传之前pull一下</p><blockquote><p>git pull origin master  #根据实际分支而定，如果github上的分支是其他则修改master成一致</p></blockquote><p>第七步，上传push</p><blockquote><p>git push -u origin master</p></blockquote><h3 id="2-更新代码"><a href="#2-更新代码" class="headerlink" title="2.更新代码"></a>2.更新代码</h3><p>第一步，查看当前git仓库状态</p><blockquote><p>git status</p></blockquote><p>第二步，更新全部</p><blockquote><p>git add *</p></blockquote><p>第三步，提交更新</p><blockquote><p>git commit -m “更新说明”</p></blockquote><p>第四步，先pull拉取最新代码</p><blockquote><p>git pull</p></blockquote><p>第五步，上传push</p><blockquote><p>git push origin master</p></blockquote><h3 id="3-git分支操作"><a href="#3-git分支操作" class="headerlink" title="3.git分支操作"></a>3.git分支操作</h3><ul><li><p>查看所有分支（包括本地和远程）</p><blockquote><p>git branch -a</p></blockquote></li><li><p>查看远程分支</p><blockquote><p>git branch -r</p></blockquote></li><li><p>切换分支</p><blockquote><p>git checkout &lt;新分支名&gt;    #切换到已有分支</p><p>git checkout -b &lt;新分支名&gt;    #创建新分支并立即切换到该分支下</p></blockquote></li><li><p>删除分支</p><blockquote><p>git branch -d &lt;分支名&gt;    #删除本地分支</p><p>git push origin –delete &lt;分支名&gt;    #删除远程分支</p></blockquote></li><li><p>合并分支</p><blockquote><p>git merge</p></blockquote></li></ul><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h3><h5 id="1-git-fetch和git-pull之间的区别？"><a href="#1-git-fetch和git-pull之间的区别？" class="headerlink" title="1.git fetch和git pull之间的区别？"></a>1.git fetch和git pull之间的区别？</h5><p>答：git fetch拉取最新分支但不会自动merge，而git pull则会自动合并</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-上传本地项目到github&quot;&gt;&lt;a href=&quot;#1-上传本地项目到github&quot; class=&quot;headerlink&quot; title=&quot;1.上传本地项目到github&quot;&gt;&lt;/a&gt;1.上传本地项目到github&lt;/h3&gt;&lt;p&gt;第一步，在github创建新的rep
      
    
    </summary>
    
    
      <category term="编程杂记" scheme="http://blog.tomhurry.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/"/>
    
      <category term="Git" scheme="http://blog.tomhurry.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/Git/"/>
    
    
  </entry>
  
</feed>
