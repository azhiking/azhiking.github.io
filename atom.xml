<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.tomhurry.com/"/>
  <updated>2019-09-22T08:21:16.046Z</updated>
  <id>http://blog.tomhurry.com/</id>
  
  <author>
    <name>TaoZhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="http://blog.tomhurry.com/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.tomhurry.com/wiki/计算机基础知识/数据结构/</id>
    <published>2019-09-22T05:29:04.000Z</published>
    <updated>2019-09-22T08:21:16.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h3 id="一些感念"><a href="#一些感念" class="headerlink" title="一些感念"></a>一些感念</h3><hr><blockquote><p>数据结构就是研究数据的<strong>逻辑结构</strong>和<strong>物理结构</strong>以及它们之间的<strong>相互关系</strong>。</p></blockquote><ul><li><p>数据结构是指数据元素的<strong>集合</strong>及元素间的<strong>相互关系</strong>和<strong>构造方法</strong>。</p></li><li><p>元素之间的相互关系称为逻辑结构，分为两大类：线性结构和非线性结构</p></li><li><p>元素与元素之间关系的存储称为存储结构（物理结构）</p></li><li><p>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合。是计算机操作的对象的总称。</p></li><li><p>数据元素：数据（集合）中的一个“个体”，数据及结构中讨论的基本单位</p></li><li><p>数据项：数据的不可分割的最小单位。一个数据元素可由若干个数据项组成。</p></li><li><p>数据类型：在一种程序设计语言中，变量所具有的数据种类。整型、浮点型、字符型等等</p></li><li><p>逻辑结构：数据之间的相互关系。</p><ul><li><p>集合 结构中的数据元素除了同属于一种类型外，别无其它关系。</p></li><li><p>线性结构 数据元素之间一对一的关系</p></li><li><p>树形结构 数据元素之间一对多的关系</p></li><li><p>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</p></li></ul></li><li><p>物理结构/存储结构：数据在计算机中的表示。物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等</p></li><li><p>在数据结构中,从逻辑上可以将其分为线性结构和非线性结构</p></li><li><p>数据结构的基本操作的设置的最重要的准则是,实现应用程序与存储结构的独立。实现应用程序是“逻辑结构”，存储的是“物理结构”。逻辑结构主要是对该结构操作的设定，物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、希哈结构）等。</p></li><li><p>顺序存储结构中，线性表的逻辑顺序和物理顺序总是一致的。但在链式存储结构中，线性表的逻辑顺序和物理顺序一般是不同的。</p></li><li><p>算法五个特性： 有穷性、确定性、可行性、输入、输出</p></li><li><p>算法设计要求：正确性、可读性、健壮性、高效率与低存储量需求。(好的算法)</p></li><li><p>算法的描述有伪程序、流程图、N-S结构图等。E-R图是实体联系模型，不是程序的描述方式。</p></li><li><p>设计算法在执行时间时需要考虑：算法选用的规模、问题的规模</p></li><li><p>时间复杂度：算法的执行时间与原操作执行次数之和成正比。</p></li><li><p>空间复杂度：若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析除输入和程序之外的辅助变量所占额外空间。</p></li></ul><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><hr><p>线性表是最简单、最基本也是最常用的一种线性结构，常采用顺序存储和链式存储，主要的基本操作是插入、删除和查找等。根据存储结构可以分为以下两种：</p><p>​    <strong>1.线性表的顺序存储</strong>：用一组地址连续的存储单元依次存储数据元素，简称<strong>顺序表</strong></p><p>​    <strong>优点</strong>：可以随机存取表中的元素，因为存储地址是连续的，所以读取时，只要计算出下标就可以随机访问，存储时按顺序存储。</p><p>​    <strong>缺点</strong>：插入和删除操作需要移动元素。</p><p>​    <strong>2.线性表的链式存储</strong>：用通过指针链接起来的结点来存储数据元素。结点分为数据域和指针域，数据域用于存储数据元素的值，指针域则存储当前结点的前驱和后继的位置信息。因为地址并不要求是连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。</p><p>​    <strong>优点</strong>：插入和删除操作不需要移动元素</p><p>​    <strong>缺点</strong>：不能随机访问</p><p>根据指针域的设置方式，可以分为以下几种链表结构：</p><ul><li>单链表：若结点中只有一个指针域，则称为线性链表(单链表)，其特点是只能从头结点开始遍历链表。</li><li>双向链表：每个结点包含两个指针，分别指向当前结点的直接前驱和直接后继。其特点是可以从表中任意的结点出发，从两个方向上遍历链表。</li><li>循环链表：在单向链表(或双向链表)的基础上令尾结点的指针指向头结点，构成循环链表。其特点是可以从表中任意结点开始遍历整个链表。</li><li>静态链表： 借助数组来描述线性表的链式存储结构，用数据元素的下标表示元素所在结点的指针。</li></ul><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><hr><p>栈和队列是程序中常用的两种数据结构，逻辑结构和线性表相同。其特点在于运算有所限制：<strong>栈</strong>按“<strong>后进先出</strong>”的规则进行操作，<strong>队列</strong>按“<strong>先进先出</strong>”的规则进行操作，所以称为运算受限的线性表。</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>栈是只能访问它的一端来实现数据存储和检索的一种线性数据结构，进行插入和删除的一端称为栈顶(Top)，另一端称为栈底(Bottom)，不含数据元素的栈称为空栈。</p><p>根据存储结构可以分为顺序栈和链栈，顺序栈空间容量是有限的，所以在插入元素时需要判断是否栈满。链栈不必另外设置头指针，链表的头指针就是栈顶指针。</p><p>​    顺序存储：</p><p>​    链式存储：</p><p>应用：典型应用包括表达式求值、括号匹配、浏览器历史记录等，将递归转变成非递归操作也可以用到栈。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素。在队列中，允许插入元素的一端称为队尾(Rear)，允许删除元素的一端称为队头(Front)。</p><p>​    <strong>顺序队列</strong>：顺序存储结构。当头尾指针相等时队列为空。在非空队列里，头指针始终指向队头前一个位置，而尾指针始终指向队尾元素的实际位置</p><p>​    <strong>循环队列</strong>：将顺序队列假想成环状结构(通过整数取余运算实现)。根据定义，空队列和满队列头尾指针指向的位置是相同的，所以为了区分这两个状态可以采用以下两种处理方式：</p><p>​    1.设置一个标志，以区分两个状态</p><p>​    2.牺牲一个存储单元，约定以“队列的尾指针所指的下一个位置是头指针时”表示队满，相同则表示队空。即队满：(rear+1)%MaxSize==front，队空：rear==front。</p><p>​    <strong>链队列</strong>：链式存储结构。限制仅在表头删除和表尾插入的单链表。显然仅有单链表的头指针不便于在表尾做插入操作，为此再增加一个尾指针，指向链表的最后一个结点。</p><p>​    基本运算：</p><p>​    队空条件：rear==front</p><p>​    队满条件：(rear+1)%MaxSize==front</p><p>​    计算队列长度：(rear-front+MaxSize)%MaxSize</p><p>​    入队：(rear+1)%MaxSize</p><p>​    出队：(front+1)%MaxSize</p><h3 id="串"><a href="#串" class="headerlink" title="串"></a>串</h3><hr><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>无向图</p><p>有向图</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>查找</p><p>排序</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/qq_31196849/article/details/78529724" rel="external nofollow noopener noreferrer" target="_blank">数据结构基础概念篇</a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h3 id=&quot;一些感念&quot;&gt;&lt;a href=&quot;#一些感念&quot; class=&quot;headerlink&quot; title=&quot;一些感念&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="http://blog.tomhurry.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://blog.tomhurry.com/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/hello-world/"/>
    <id>http://blog.tomhurry.com/wiki/生活学习/hello-world/</id>
    <published>2019-09-16T00:27:58.000Z</published>
    <updated>2019-09-16T00:29:32.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello，world"><a href="#Hello，world" class="headerlink" title="Hello，world!"></a>Hello，world!</h2><p>my name is taozhi, this is my personal blog.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello，world&quot;&gt;&lt;a href=&quot;#Hello，world&quot; class=&quot;headerlink&quot; title=&quot;Hello，world!&quot;&gt;&lt;/a&gt;Hello，world!&lt;/h2&gt;&lt;p&gt;my name is taozhi, this is my pe
      
    
    </summary>
    
    
      <category term="生活学习" scheme="http://blog.tomhurry.com/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://blog.tomhurry.com/wiki/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/Git/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.tomhurry.com/wiki/编程杂记/Git/git学习笔记/</id>
    <published>2019-09-11T07:37:24.000Z</published>
    <updated>2019-09-11T12:52:51.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-上传本地项目到github"><a href="#1-上传本地项目到github" class="headerlink" title="1.上传本地项目到github"></a>1.上传本地项目到github</h3><p>第一步，在github创建新的repository</p><p>第二步，在本地建立git仓库</p><blockquote><p>git init</p></blockquote><p>第三步，将项目的所有文件添加到仓库中</p><blockquote><p>git add .</p><p>或者 git add *</p></blockquote><p>第四步，提交</p><blockquote><p>git commit -m “更新说明”</p></blockquote><p>第五步，将本地仓库关联到github</p><blockquote><p>git remote add origin <a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a>:xxxxxxxx.git</p></blockquote><p>第六步，上传之前pull一下</p><blockquote><p>git pull origin master  #根据实际分支而定，如果github上的分支是其他则修改master成一致</p></blockquote><p>第七步，上传push</p><blockquote><p>git push -u origin master</p></blockquote><h3 id="2-更新代码"><a href="#2-更新代码" class="headerlink" title="2.更新代码"></a>2.更新代码</h3><p>第一步，查看当前git仓库状态</p><blockquote><p>git status</p></blockquote><p>第二步，更新全部</p><blockquote><p>git add *</p></blockquote><p>第三步，提交更新</p><blockquote><p>git commit -m “更新说明”</p></blockquote><p>第四步，先pull拉取最新代码</p><blockquote><p>git pull</p></blockquote><p>第五步，上传push</p><blockquote><p>git push origin master</p></blockquote><h3 id="3-git分支操作"><a href="#3-git分支操作" class="headerlink" title="3.git分支操作"></a>3.git分支操作</h3><ul><li><p>查看所有分支（包括本地和远程）</p><blockquote><p>git branch -a</p></blockquote></li><li><p>查看远程分支</p><blockquote><p>git branch -r</p></blockquote></li><li><p>切换分支</p><blockquote><p>git checkout &lt;新分支名&gt;    #切换到已有分支</p><p>git checkout -b &lt;新分支名&gt;    #创建新分支并立即切换到该分支下</p></blockquote></li><li><p>删除分支</p><blockquote><p>git branch -d &lt;分支名&gt;    #删除本地分支</p><p>git push origin –delete &lt;分支名&gt;    #删除远程分支</p></blockquote></li><li><p>合并分支</p><blockquote><p>git merge</p></blockquote></li></ul><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h3><h5 id="1-git-fetch和git-pull之间的区别？"><a href="#1-git-fetch和git-pull之间的区别？" class="headerlink" title="1.git fetch和git pull之间的区别？"></a>1.git fetch和git pull之间的区别？</h5><p>答：git fetch拉取最新分支但不会自动merge，而git pull则会自动合并</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-上传本地项目到github&quot;&gt;&lt;a href=&quot;#1-上传本地项目到github&quot; class=&quot;headerlink&quot; title=&quot;1.上传本地项目到github&quot;&gt;&lt;/a&gt;1.上传本地项目到github&lt;/h3&gt;&lt;p&gt;第一步，在github创建新的rep
      
    
    </summary>
    
    
      <category term="编程杂记" scheme="http://blog.tomhurry.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/"/>
    
      <category term="Git" scheme="http://blog.tomhurry.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/Git/"/>
    
    
  </entry>
  
</feed>
