{"pages":[{"title":"About","date":"2019-09-11T06:26:15.705Z","path":"about/index.html","text":""},{"title":"Categories","date":"2019-09-11T07:38:14.319Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2019-09-11T07:38:27.042Z","path":"tags/index.html","text":""}],"posts":[{"title":"数据结构","date":"2019-09-22T05:29:04.000Z","path":"wiki/计算机基础知识/数据结构/","text":"数据结构一些感念 数据结构就是研究数据的逻辑结构和物理结构以及它们之间的相互关系。 数据结构是指数据元素的集合及元素间的相互关系和构造方法。 元素之间的相互关系称为逻辑结构，分为两大类：线性结构和非线性结构 元素与元素之间关系的存储称为存储结构（物理结构） 数据：所有能被输入到计算机中，且能被计算机处理的符号的集合。是计算机操作的对象的总称。 数据元素：数据（集合）中的一个“个体”，数据及结构中讨论的基本单位 数据项：数据的不可分割的最小单位。一个数据元素可由若干个数据项组成。 数据类型：在一种程序设计语言中，变量所具有的数据种类。整型、浮点型、字符型等等 逻辑结构：数据之间的相互关系。 集合 结构中的数据元素除了同属于一种类型外，别无其它关系。 线性结构 数据元素之间一对一的关系 树形结构 数据元素之间一对多的关系 图状结构或网状结构 结构中的数据元素之间存在多对多的关系 物理结构/存储结构：数据在计算机中的表示。物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等 在数据结构中,从逻辑上可以将其分为线性结构和非线性结构 数据结构的基本操作的设置的最重要的准则是,实现应用程序与存储结构的独立。实现应用程序是“逻辑结构”，存储的是“物理结构”。逻辑结构主要是对该结构操作的设定，物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、希哈结构）等。 顺序存储结构中，线性表的逻辑顺序和物理顺序总是一致的。但在链式存储结构中，线性表的逻辑顺序和物理顺序一般是不同的。 算法五个特性： 有穷性、确定性、可行性、输入、输出 算法设计要求：正确性、可读性、健壮性、高效率与低存储量需求。(好的算法) 算法的描述有伪程序、流程图、N-S结构图等。E-R图是实体联系模型，不是程序的描述方式。 设计算法在执行时间时需要考虑：算法选用的规模、问题的规模 时间复杂度：算法的执行时间与原操作执行次数之和成正比。 空间复杂度：若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析除输入和程序之外的辅助变量所占额外空间。 线性表 线性表是最简单、最基本也是最常用的一种线性结构，常采用顺序存储和链式存储，主要的基本操作是插入、删除和查找等。根据存储结构可以分为以下两种： ​ 1.线性表的顺序存储：用一组地址连续的存储单元依次存储数据元素，简称顺序表 ​ 优点：可以随机存取表中的元素，因为存储地址是连续的，所以读取时，只要计算出下标就可以随机访问，存储时按顺序存储。 ​ 缺点：插入和删除操作需要移动元素。 ​ 2.线性表的链式存储：用通过指针链接起来的结点来存储数据元素。结点分为数据域和指针域，数据域用于存储数据元素的值，指针域则存储当前结点的前驱和后继的位置信息。因为地址并不要求是连续的，因此存储数据元素的同时必须存储元素之间的逻辑关系。 ​ 优点：插入和删除操作不需要移动元素 ​ 缺点：不能随机访问 根据指针域的设置方式，可以分为以下几种链表结构： 单链表：若结点中只有一个指针域，则称为线性链表(单链表)，其特点是只能从头结点开始遍历链表。 双向链表：每个结点包含两个指针，分别指向当前结点的直接前驱和直接后继。其特点是可以从表中任意的结点出发，从两个方向上遍历链表。 循环链表：在单向链表(或双向链表)的基础上令尾结点的指针指向头结点，构成循环链表。其特点是可以从表中任意结点开始遍历整个链表。 静态链表： 借助数组来描述线性表的链式存储结构，用数据元素的下标表示元素所在结点的指针。 栈和队列 栈和队列是程序中常用的两种数据结构，逻辑结构和线性表相同。其特点在于运算有所限制：栈按“后进先出”的规则进行操作，队列按“先进先出”的规则进行操作，所以称为运算受限的线性表。 栈栈是只能访问它的一端来实现数据存储和检索的一种线性数据结构，进行插入和删除的一端称为栈顶(Top)，另一端称为栈底(Bottom)，不含数据元素的栈称为空栈。 根据存储结构可以分为顺序栈和链栈，顺序栈空间容量是有限的，所以在插入元素时需要判断是否栈满。链栈不必另外设置头指针，链表的头指针就是栈顶指针。 ​ 顺序存储： ​ 链式存储： 应用：典型应用包括表达式求值、括号匹配、浏览器历史记录等，将递归转变成非递归操作也可以用到栈。 队列队列是一种先进先出(FIFO)的线性表，它只允许在表的一端插入元素，而在表的另一端删除元素。在队列中，允许插入元素的一端称为队尾(Rear)，允许删除元素的一端称为队头(Front)。 ​ 顺序队列：顺序存储结构。当头尾指针相等时队列为空。在非空队列里，头指针始终指向队头前一个位置，而尾指针始终指向队尾元素的实际位置 ​ 循环队列：将顺序队列假想成环状结构(通过整数取余运算实现)。根据定义，空队列和满队列头尾指针指向的位置是相同的，所以为了区分这两个状态可以采用以下两种处理方式： ​ 1.设置一个标志，以区分两个状态 ​ 2.牺牲一个存储单元，约定以“队列的尾指针所指的下一个位置是头指针时”表示队满，相同则表示队空。即队满：(rear+1)%MaxSize==front，队空：rear==front。 ​ 链队列：链式存储结构。限制仅在表头删除和表尾插入的单链表。显然仅有单链表的头指针不便于在表尾做插入操作，为此再增加一个尾指针，指向链表的最后一个结点。 ​ 基本运算： ​ 队空条件：rear==front ​ 队满条件：(rear+1)%MaxSize==front ​ 计算队列长度：(rear-front+MaxSize)%MaxSize ​ 入队：(rear+1)%MaxSize ​ 出队：(front+1)%MaxSize 串 树图无向图 有向图 算法查找 排序 参考资料 数据结构基础概念篇","tags":[],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"http://blog.tomhurry.com/categories/计算机基础知识/"}]},{"title":"hello world","date":"2019-09-16T00:27:58.000Z","path":"wiki/生活学习/hello-world/","text":"Hello，world!my name is taozhi, this is my personal blog.","tags":[],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://blog.tomhurry.com/categories/生活学习/"}]},{"title":"git学习笔记","date":"2019-09-11T07:37:24.000Z","path":"wiki/编程杂记/Git/git学习笔记/","text":"1.上传本地项目到github第一步，在github创建新的repository 第二步，在本地建立git仓库 git init 第三步，将项目的所有文件添加到仓库中 git add . 或者 git add * 第四步，提交 git commit -m “更新说明” 第五步，将本地仓库关联到github git remote add origin git@github.com:xxxxxxxx.git 第六步，上传之前pull一下 git pull origin master #根据实际分支而定，如果github上的分支是其他则修改master成一致 第七步，上传push git push -u origin master 2.更新代码第一步，查看当前git仓库状态 git status 第二步，更新全部 git add * 第三步，提交更新 git commit -m “更新说明” 第四步，先pull拉取最新代码 git pull 第五步，上传push git push origin master 3.git分支操作 查看所有分支（包括本地和远程） git branch -a 查看远程分支 git branch -r 切换分支 git checkout &lt;新分支名&gt; #切换到已有分支 git checkout -b &lt;新分支名&gt; #创建新分支并立即切换到该分支下 删除分支 git branch -d &lt;分支名&gt; #删除本地分支 git push origin –delete &lt;分支名&gt; #删除远程分支 合并分支 git merge 4.其他1.git fetch和git pull之间的区别？答：git fetch拉取最新分支但不会自动merge，而git pull则会自动合并","tags":[],"categories":[{"name":"编程杂记","slug":"编程杂记","permalink":"http://blog.tomhurry.com/categories/编程杂记/"},{"name":"Git","slug":"编程杂记/Git","permalink":"http://blog.tomhurry.com/categories/编程杂记/Git/"}]}]}